footer: SAWADA takayoshi (2015/2/11|2015/2/18) 第二回/第三回 Topotal輪読会
slidenumbers: true

##JavaScript における<br/>変数のスコープとクロージャー
###JavaScript で学ぶ関数型プログラミング 3章


---
#内容
- バインディングとスコープ
    - グローバルスコープ / 静的スコープ / 動的スコープ
    関数スコープ
- JavaScript におけるスコープのシミュレーション
- クロージャーによる抽象化について
    - シャドウイング / 自由変数


---
#本章の目的
- スコープとクロージャについて理解し基礎を抑える
    __=> 次章以降の内容に大きく関わる__

---
## バインディングとスコープ

---
#バインディングとは?

- ある値をある名前に関連付ける動作のこと
    - var 宣言による変数の定義
    - 関数の引数
    - this の設定
    - プロパティのアサイン


---
#バインディングの例

```javascript

var book = {
    title: '星降りの夜', // プロパティのアサイン
    getTitle: function (subTitle) { //関数の引数
        var titleHead = 'タイトル:'; // var 宣言による変数の定義
        return String.format(
            '%s %s %s', titleHead, this.title, subTitle
        );
    }
};

// call による this の設定
book.getTitle.call({title: '世界樹物語'}, '異世界への旅');
//=> 'タイトル: 世界樹物語 異世界への旅'
```



---
#スコープとは?
- スコープは以下のような意味を持つ
    - this バインディングの値
    - this バインディングの値により定義される実行コンテクスト
    - 変数の「生存期間」
    - 変数値の解決の仕組み __->本書ではこれを意味するものとする__



---
#スコープの種類
- JavaScript のスコープにはいくつかのタイプが存在する
    - グローバルスコープ (global scope)
    - 静的スコープ (lexical scope)
    - 動的スコープ (dynamic scope)
    - 関数スコープ (function scope)



---
#グローバルスコープとは?

- JavaScript 内で一番生存範囲が大きなスコープ
    __=> 生存範囲が広い分、書換えられる危険性が高い__

```javascript

// var を伴わない変数の宣言
aGlobalVariable = 'Livin la vida global';
(function () {
    // どこからでも書換えが可能!!
    aGlobalVariable = 'hoge!';
    return; 
})();
aGlobalVariable;
//=> 'hoge!'

```

---
#静的スコープとは?
- 変数とその値を参照できる範囲

```javascript
aVariable = '外';
function aFun() {
    var aVariable = '内';
    return _.map([1,2,3], function (num) {
        var aVariable = '最内';
        return [aVariable, num].join(' ');
    });
}
/** 出力される値を予想してみよう! **/
aFun();
//=>???
aVariable;
//=>???
```

---
#静的スコープとは?
- 呼出から最も近くでバインディングされいるものから順に参照

```javascript
aVariable = '外';
function aFun() {
    var aVariable = '内';
    return _.map([1,2,3], function (num) {
        var aVariable = '最内';
        return [aVariable, num].join(' ');
    });
}
/** 解答 **/
aFun();
//=> ['最内 1','最内 2','最内 3']
aVariable;
//=> 外
```


---
#動的スコープとは?
- 実行時における関数の呼び出され方により、スコープが変化するスコープ[^1] __=> this の参照がそれにあたる__

```javascript
function globalThis() {
    return this;
}

globalThis();
// => グローバルオブジェクト
globalThis.call('banana');
// => 'banana'
```

[^1]: [すぐに忘れる脳みそのためのメモ: レキシカルスコープとダイナミックスコープ](http://jutememo.blogspot.jp/2012/03/blog-post.html) 参照

---
#動的スコープが使われそうな例

```javascript
var hello = function (arg1, arg2){
    return this.calc(arg1, arg2);
};
var Add = {
    calc: function (arg1, arg2){
        return arg1 + arg2;
    }
};
var Mul = {
    calc: function (arg1, arg2){
        return arg1 * arg2;
    }
};
console.log(hello.apply(Add, [1, 2])); // => 3
console.log(hello.apply(Mul, [1, 2])); // => 2
```

---
#動的スコープのデメリットとその対策
- スコープが変化することにより混乱を招きやすい
    __=> _.bind[^2] or _.bindAll[^3] を使用することで固定値に設定ができる__

[^2]: _.bind(function, object, [*arguments]) function を object にバインドした関数を返す。返された関数はどのコンテクストで呼ばれても this の値として object を参照した状態で実行する。

[^3]: _.bindAll(object, *methodNames) methodNames で指定されたメソッドを、常に object にバインドし、どこで実行してもそれを this として実行するようになる。



---
#_.bind の例

```javascript
function globalThis() {
    return this;
}

// 実行時のthisを'nope'に固定！
var nopeThis = _.bind(globalThis, 'nope');

globalThis.call('banana');
// => 'nope'
```


---
#_.bindAll の例

```javascript
var target = {
    name: '正しい値',
    aux: function() { return this.name; },
    act: function() { return this.aux(); }
};

target.act.call('wat');
// TypeError: Object [object String] has no method 'aux'

// auxとactの実行時のthisをtargetに固定!
_.bindAll(target, 'aux', 'act');

target.act.call('wat');
// => '正しい値'
// これで動的スコープがもたらす危険から救われた！ ( (0) / (0)) ☆祝☆
```


---
#関数スコープとは?
- 関数内で var 宣言された変数の生存範囲

```javascript
var myname = "global";
 
function func() {
    console.log(myname);    //出力内容は？
    var myname = "local";
    console.log(myname);    //出力内容は？
}
 
func();
```


---
#関数スコープとは?
__[解答]__

```javascript
var myname = "global";
 
function func() {
    console.log(myname);    // => undefiend
    var myname = "local";
    console.log(myname);    // => 'local'
}
 
func();
```


---
#関数スコープとは?
__[解答]__

```javascript
var myname = "global";
 
function func() {
    console.log(myname);    // => undefiend??????????
    var myname = "local";
    console.log(myname);    // => 'local'
}
 
func();
```


---
#なぜこうなるのか?
- JavaScript では、関数内で宣言されたローカル変数は、すべてその関数の先頭で宣言されたものとみなされるから[^4]
    __=> これを「変数の巻き上げ」と呼ぶ__


[^4]: [ANALOGIC: 知らないと怖い「変数の巻き上げ」とは？](http://analogic.jp/hoisting/) 参照


---
##JavaScript における<br/>スコープのシミュレーション


---
#スコープってどうやって実装されてるの?
- 巨大なテーブル[^5]が１つ存在しその値を参照している
    - 名前と名前に紐付いている値のペアが格納されている

```javascript

// テーブルのイメージ
var globals = {
    key1: ['val1', 'val2'],
    key2: ['val1', 'val2', 'val3'],
    key3: ['val1', 'val2', 'val3', 'val4']
};

```

[^5]: どの JavaScript エンジンにもルックアップテーブルは存在します



---
#動的スコープのシミュレーション実装

```javascript
var globals = {}; // ルックアップテーブルを用意

function makeBindFun(resolber) {
    return function(k, v) {
        var stack = globals[k] || [];
        globals[k] = resolber(stack, v);
        return globals;
    };
}

// スタックへ値をバインディング
var stackBinder = markBindFun(function(stack, v) {
    stack.push(v);
    return stack;
});

// スタックの最上部の値を削除
var stackUnbinder = markBindFun(function(stack) {
    stack.pop();
    return stack;
});
```


---

```javascript
var dynamicLookup = function(k) {
    var slot = globals[k] || [];
    return _.last(slot);
};

stackBinder('a', 1);
stackBinder('b', 100);

dynamicLookup('a'); // => 1

globals;
// => {'a': [1], 'b': [100]}

```


---
#動的スコープのシミュレーションの考察

- それぞれのキーと関連付けられたスタックを管理できる
    - 変数宣言時のスタックへの値の追加ができる
    - コンテクスト終了時のスタックの値の unbined ができる



